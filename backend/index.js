// backend/index.js
const express = require('express');
const cors = require('cors');
const path = require('path');
const vmRoutes = require('./routes/vmRoutes');
const fs = require('fs');

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng Express
const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ƒê·∫£m b·∫£o th∆∞ m·ª•c data t·ªìn t·∫°i
const dataDir = path.join(__dirname, 'data');
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
}

// T·∫°o route ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra server
app.get('/api/status', (req, res) => {
  res.json({ status: 'running', time: new Date().toISOString() });
});

// Route m·∫∑c ƒë·ªãnh
app.get('/api', (req, res) => {
  res.json({ message: 'VM Management API' });
});

// ƒê·∫£m b·∫£o API routes t·ªìn t·∫°i (comment cho ƒë·∫øn khi c√≥ file routes)
// app.use('/api', vmRoutes);

// Error handler
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    error: err.message,
    stack: process.env.NODE_ENV === 'production' ? 'ü•û' : err.stack,
  });
});

// Kh·ªüi ƒë·ªông server
app.listen(PORT, () => {
  console.log(`Server ƒëang ch·∫°y tr√™n c·ªïng ${PORT}`);
});

// X·ª≠ l√Ω tho√°t ·ª©ng d·ª•ng
process.on('SIGINT', () => {
  console.log('ƒê√≥ng ·ª©ng d·ª•ng...');
  process.exit(0);
});

module.exports = app;